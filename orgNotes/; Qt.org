* Терминология

- functor :: Имя метода или ф-ции.

- underlying platform :: Базовая платформа

- widget :: Элемент графического интерфейса.

- Событие :: Результат любого взаимодействия пользователя с элементами интерфейса : нажатие кнопки, перемещение мыши и т. п.

- pixmap :: Пиксельное изображение.

- Qt Assistant :: Встроенная документация



* Кроссплатформенность.

Для того чтобы запустить Qt приложение нужно получить исполняемый файл для arm процессора, для этого нужно скомпилировать проект в Qt Creator.

Также в CMakeLists файл нужно добавить некоторые доп. настройки.


* Система ресурсов

- Ресурс :: Это файл, используемый приложением на этапе выполнения % изображение, иконка.

  Используемые ресурсы описываются в XML файле с расширением ~.qrc~
  - После добавления ресурса необходимо сохранить файл.

  - Добавляемый ресурс лучше скопировать в папку проекта.


* Структура проекта

Все заголовочные файлы подключаем в заголовочном файле widget.h

Внешний вид приложения настраиваем в файле mainwindow.cpp или widget.cpp


* <2023-12-09 Sat> QDesigner

Интегрирован в Qt Creator. Создает виджеты отдельно от исходного кода программы, созданные им виджеты интегруют с кодом, используя механизм сигналов и слотов.

Имеет 3 режима : Edit mode, Signal & slots mode, buddy mdoe, tab order editing mode.

Инструмент, ускоряющий процесс проектирования пользовательского интерфейса.

.ui файл написан на XML.

- callback :: Указатель на ф-цию.
  + Qt предоставляет альтернативу технологии callback - signal & slots

** TODO Освоить основные виджеты
SCHEDULED: <2023-12-11 Mon>

Все измеряется в пикселях.

*** Основные

- QLineEdit :: Поле, в которое можно ввести текст.


*** Абстрактный класс QLayout

Делят пространство родительского виджета на равные части, с учетом определенного расстояния между ними, каждый дочерний виджет заполняет выделенное ему пространство, layout и соответственно форму нельзя сделать меньше минимального размера ее компонентов с учетом расстояния между ними.

**** Виртуальные методы

- addWidget() :: Позвляет добавить элемент пользовательского интерфейса.

- addLayout() :: Позволяет добавить вложенный layout.

- addSpacing() :: Расстояние между компонентами

**** Производные классы

- QHBoxLayout :: Позволяет выровнять виджеты по горизонтали.

- QVBoxLayout :: Позволяет выровнять виджеты по горизонтали.

- QGridLayout :: Позвляет организовать виджеты в виде матрицы.



** Сигналы и слоты

Механизм сигналов и слотов позволяет связывать объекты в форме.

- Сигнал (Signal) :: сообщение о том что состояние объекта изменилось, произошло определенное событие.

- Обработчик события (Slot) :: Ф-ция, которая обрабатывает определенный сигнал.
  + Событиям соответствуют сигналы. Определенный сигнал подается когда происходит соответствующее событие.

Слоты и сигналы связывают с помощью ф-ции :
#+BEGIN_SRC cpp
class Sample : public QWidget {
signals:
  void cppSignal(const QString& str) const;

public slots:
  void cppSlot(const QString& str) const {
    // Прописываем логику.
  }

}
// Через макросы
Sapmple::Sample()
{
    connect(
        QObject* адрес_отправителя,

        const chat* SIGNAL(название_сигнала()),

        QObject* адрес_получателя,

        const char*               SLOT(обработчик(список_параметров)),

        ConnectionType тип_связи
    );
// Через указатели
    connect(
        QObject* адрес_отправителя,

        &Тип_отправителя::Сигнал,

        QObject* адрес_получателя,
        &Тип_получателя::Имя_метода_обработчика,

        ConnectionType тип_связи
    );
}

#+END_SRC
- Связать объект с обработчиком можно только после того как он объявлен.

- Тип связи определяет : будет ли сообщение доставлено в слот немедлено или будет поставлено в очередь. Относится к многопоточному программированию.

- Сигналы и слоты объявляют в заговочном файле формы с помощью ключ слов signal и slot соотв.
  + Макрос Q_OBJECT облегчает работу с мех. сигналов и слотов.
  + Необходимо :
    1. Число аргументов сигнала не может быть меньше чем число аргументов его обработчика.

    2. Между типами аргументов должны быть определены неявные преобразования.

- Сигналы библиотечных классов описаны в их документации.

- Один сигнал можно связать с несколькими слотами, а также один слот можно связать с несколькими сигналами.

- В качестве слотов можно использовать лямбда ф-ции.

- SIGNAL & SLOT - макросы, при их использовании нельзя отловить ошибки во время компиляции.

Для кнопки : clicked()
Для зависимого переключателя (radio button) : toggled(bool)



** Style Sheet

Настроить внешний вид виджетов можно с помощью синтакисиса css и ф-ции ~setStyleSheet~ или файла с расширением ~.qss~, путь к которому добавляют фиксируют в ~.qrs~ файле.


** Horizontal & Vertical Policy

* Классы

** QMainWindow

Каркас для построения пользовательского интерфейса приложения.

** QWidget

Базовый класс для всех элементов пользовательского интерфейса.

** QDialog

Базовый класс для диалоговых окон.

** QIcon

Создает массив пикселей по переданному пиксельному изображению.
