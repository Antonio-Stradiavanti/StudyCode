#+startup: overview
#+startup: num
* Ресурсы

1. Герберт Шидт - Java Полное руководство
2. Крейг Уоллс - Spring в действии


* Ход работы

Чтобы избежать проблем во время сборки классы следует хранить в главном пакете каталога ~/src/java~.

** Этапы

2. Реализация базового функционала

3. Подключение базы данных Postgre SQL, разделение функционала бота.

4. Обработка ошибок, рефакторинг, настройка автоматических тестов

** Вопросы

** Задачи [0/2]

*** TODO [#A] ЛР №2 Запустить, добавить кнопки, реализовать команды, не зависящие от базы данных
DEADLINE: <2023-12-09 Sat>

- [X] Разобраться с обработкой исключений
- [ ] Разобраться с настройкой меню бота, добавить кнопки.

- [X] Разобраться с пакетами, аннотациями и интерфейсами.

- [ ] Отправить отчет Тюрину.

*** TODO Подключить б/д и реализовать функционал команд, зависящих от б/д.

- [X] Получить исполняемый jar-файл
- [X] Установить postgre и подключить все необходимые зависимости.

- [ ] Разобраться с б/д, кот. сделал Серега, понять как с ней работать.

- [ ] Отправить отчет Тюрину.



* Теор материал

** Терминология

- Зависимость :: Одно из отношение между объектами в терминах ООП, один объект каким то образом ссылается на другой.

- bean :: Компонент объектной модели JavaBeans. Контейнер объекта некоторого класса, который создается и обслуживается Spring

- classpath :: Каталог, в котором осуществляется поиск классов.

- Spring Boot :: Расширение фреймворка Java Spring, используется для создания микросервисов. Предоставляет :
  1. Автоконфигурацию, механизм, который позволяет автоматизировать управление контекстом приложения.
  2. Автоматизацию сборки зависимостей
  3. Мониторинг времени выполнения.

- Микросервис :: Маленькая веб-служба выполняет определенные задачи И взаимодействует с другими веб-службами.
  + (разделяй и властвуй) Позволяют разбить большое, сложное монолитное приложение на маленькие, логически независимые модули, что существенно упрощает процессы : разработки, тестирования и развертывания.
  + Приложения на основе микросервисов размещаются в облаке.

- Вебхук == веб-перехватчик :: Механизм получения одним приложением в режиме реального времени информации о событиях, происходящих в другом приложении.
  + Сервер c вебхуком автоматически отправляет клиенту полезную информацию всякий раз когда на серверном приложении происходит определенное событие.
  + Использует протокол HTTP или HTTPS.
    * В целях защиты соединения полезные данные хешируют.

- Контроллер :: Класс, обрабатывает запросы и возвращает некотрорую информацию.

- jar :: Архивный файл приложения на языке Java. Используется для хранения приложения Java в одном файле, состоит из скомпилированных в байт-код классов, списка ресурсов и ресурсов приложения.
  + В момент запуска jar файла вызывается метод main - точка входа в программу.

- logger :: Средство ведения журнала


** Тг бот

Ключевой класс : [[https://core.telegram.org/bots/api#message][Message]]

Массив ~PhotoSize~ представляет доступные размеры фотографии.

- Бот :: Особая учетная запись, небольшое приложение, которое запускается внутри приложения Телеграм, используюет сообщения в качестве входных данных.
  + Главная ф-ция :: отправлять и получать сообщения.
    * Может писать в лс только тем пользователям, которые его запустили.
    * Отправляет запросы на Телеграм и получает от него обновления.
    * Пишутся на Java, js, python с использованием Telegram Bot API или Telegram API (используется больше для создания своего клиента Телеграм) И библиотек.

Создать и настроить бота можно через спец. бота BotFather, он выдает уникальный идентификатор бота, он используется для управления созданным ботом.

Чтобы бот был всегда доступен jar файл приложения нужно запусть на linux-сервере.

*** Отправка файлов

Файлы загружают на сервер, а затем отправляют по их уникальному идентификатору ~file_id~
- За отправку фото отвечает класс ~SendPhoto~

*** Кнопки

- callback query :: Обратный вызов

Меню в виде кнопок называется inline keyboard

- ~InlineKeyboardButton~ :: Класс, оп. привязанные к сообщению кнопки.
  + Для каждой кнопки нужно задать текст и call back data
    * Экземпляр класса ~CallbackQuery~ (включает в себя объект, пр. сообщение, к которому пр. кнопка) представляет запрос обратный вызова, оправленный в момент нажатия кнопки, получается как событие в ~.NET~


*** Опросы

Опрос можно оправить с помощью экз. класса ~SendPoll~


** Slf4j фасадный метод для различных фрейворков ведения журналов.

Аннотация ~@ Slf4j~ создает объект ~log~

Средство ведения журнала (логгер) настраивают в XML файле ~/src/main/resources/logback.xml~.

Логгер фиксирует всю информацию в консоли.


** Средство автоматизации сборки Gradle

Плагины добавляют новые задачи (tasks), которые выполняют компиляцию кода или выполнение тестов.

Зависимость - внешний модуль (фреймворк, библиотека, плагин), необходимый на одном из этапов разработки ПО.
- Объявляется в блоке dependencies.

Конфигурация зависимости определяет этап разработки, на котором она будет задействована : компиляции, сборки, тестирования.

- stater :: Набор связанных зависимостей определенной версии.

Чтобы объявить зависимость на языке gradle-groovy нужно :

1. Выбрать конфигурацию :
   - implementation :: Зависимость необходима на этапе компиляции. Включается в переменную среды окружения classpath.
   - compileOnly :: Зависимость необходима на этапе компиляции. Не включается в classpath.
2. Описать зависимость. Зависимость описывается 4 ключами : группы, имени и версии.

Сгенерировать исполняемый jar файл можно с помощью скрипта ~shadow jar~, полученный файл находится в каталоге ~/build/libs/~


** Система управления реляционными базами данных PostgreSQL.

С базой данных лучше работать в IntelliJ IDEA.

Стандартный порт : 5432.

Чтобы писать запросы в программе pgAdmin нужно открыть query tool для определенной базы данных.

schema -> структура базы данных, аналогична каталогам или пространствам имен.

Допустимый формат даты : ~год/месяц/день~ или ~год-месяц-день~

; -> конец инструкции.

- SELECT :: Позволяет извлечь данные из одной или нескольких таблиц базы данных.
  + * :: Извлечь все столбцы из указанной таблицы.

- FROM :: Источник данных.

- INSERT :: Добавить новую строку в таблицу.

- ALTER TABLE Таблица :: Изменить таблицу, позволяет добавить новые столбцы в таблицу или настроить уже добавленные.

  + RENAME COLUMN старое_имя_стобца TO новое_имя_стобца :: Переименовать столбец.

  + ADD COLUMN имя_столбца :: Добавить столбец.

  + DROP COLUMN имя_столбца :: Удалить столбец.

- UPDATE Таблица SET столбец = значение WHERE условие :: Изменить данные в таблице.


** Фреймворк Spring

REST для микросервисов, мне пока не нужен.

*** Что вообще делает Spring

Используется везде, где используется Java, просто упрощает разработку приложений.

Spring :: Самый популярный Java фреймворк, облегчает разработку,

**** Позволяет автоматизировать управление зависимостями

Зависимость это когда один класс включает в себя экземпляры других и использует их методы в своих методах.

Т. е. не создавать вручную миллион экземпляров используемых классов.

Используемые классы аннотируют чтобы Spring автоматически создал их экземпляры в момент запуска приложения.

Создает контекст приложения и обеспечивает удобный доступ к б/д.

Контекст приложения Spring - Специальный объект (контейнер), который создает компоненты приложения и внедряет их в другие, зависящие от них компоненты с помощью констурктора или геттеров.


**** Инъекция зависимостей - процесс объединения bean-компонентов - Контекст приложения и автоконфигурация

Механизм, который позволяет построить дерево зависимостей и поместить один класс внутрь другого.

Spring создает контейнер == *контекст приложения*, в котором создает необходимые объекты классов (компоненты), из которых состоит приложение и управляет их жизненным циклом.
- Контекстом приложения управляют с помощью XML-файлов (устаревший способ), так и с помощью спец. класса конфигурации (актуальный способ).

Автоконфигурация включает : связывание компонетов и внедрение свойств.



*** Структура проекта Java Spring

- Spring Tool Suite :: среда разработки на Spring, расширение для vs code.

- Spring Initializr :: Инструмент инициализации проекта на Spring Boot, Предоставляет REST API.

- Gradle :: Высокопроизводительный иструмент для автоматизации сборки приложений. Выполняется на виртуальной машине Java. Лучше чем Maven.
  + Зависимости добавляются в файл ~build.gradle~.
    - Зависимости :: Модули, библиотеки, необходимые для компиляции приложения.

    - Объявление зависимостей : 1 - в виде строки, 2 - в виде структуры, сост. из пар ключ-значение : группа, имя, версия.
    - Типы зависимостей : 1 - implementation -> используется только для компиляции приложения.

**** test

Каталог ~/src/test/~ предназначен для автоматических тестов.

**** main

Каталог ~resources~ содержит статические ресурсы (таблицы стилей, изображения, JavaScript) и шаблоны html, предназначенные для отображения контента в браузере И конфигурационные свойства.
- В каталоге ~/src/main/resources/static/~ хранят статические ресурсы
- В файле ~/src/main/resources/application.properties~ ИЛИ ~/src/main/resources/application.yaml~ описывают *конфигурационные свойства*, но YAML более удобный формат.
  * _Конфигурационные свойства используют для переопределения занчений, присваиваемых механизмом автоконфигурации_.

  * Spring внедряет значения в свойства компонетов, которые хранятся в универсальном хранилище - *откружении Spring*, оно включает следующие /источники/ : переменные среды окружения, аргументы командной строки, application.properties/yaml.

Статический метод ~run(класс_конфигурации, агрументы_командной_строки)~ класса ~SpringApplication~ выполняет фактическую загрузку приложения (вместе со всеми зависимостями), создает контекст приложения ~Spring~.


**** Метаданные проекта

1. Идентификатор группы должен соответствовать соглашениям Java о идентификаторах пакетов. Чтобы сформировать уникальный идентификатор пакета нужно использовать обратное доменное имя организации в качестве префикса для идентифкатора пакета.
   - Доменное имя :: Абстракция над ip адресом, состоит из корневого домена и одного или нескольких компонентов, разделенных точками.
     1. Корневой домен (TLD) % ru, uk, com, org.
     2. Один или несколько компонентов, следующих за корневым доменом. Последовательность от 1 до 63 символов (букв лат. алфавита, цифр и символа -).
2. Идентификатор информационного продукта == идентификатор jar без версии.
   - Диспатчер используется для обработки потока сообщений из тг. Создается с помощью spring boot.



*** Аннотации Spring и Lombok

- ~@SpringBootApplication~ :: Указывается в главном классе приложения. Специализированная форма аннотации ~Configuration~, включает аннотации :
  + ~@ComponentScan~ :: Включает сканирование компонентов - указывает Spring просмотреть все пакеты на уровне главного класса и создать экземпляры классов, помеченных как компоненты контекста приложения Spring.

  + ~@Configuration~ :: Объявляет спец. класс конфигурации, который создает bean-компоненты для контекста Spring.
    * ~@Bean~ :: Определяет методы, _создающие экземпляры компонентов и устанавливающие их свойства_.

      * Имя бина по умолчанию совпадает с именем метода.

      * Этой аннотацией снабжают методы класса конфигурации. Возвращаемые ими объекты должны быть добавлены в контекст приложения как бин-компоненты.

      * Позволяет явно указать Spring какие конструкторы вызывать.

  + ~@EnableAutoConfiguration~ ::

- ~@Component~ :: Основная аннтоция, объявляет класс компонентом контекста приложения Spring.
  + Т. е. если объект класса, объявленного как компонент класса используется другими классами, то _его экземпляры будут созданы автоматически_.

  + Все bean-компоненты можно настраивать с помощью свойств из окружения Spring.


- ~@Service~ ::

- ~@Controller~ ::

- ~@Restcontroller~ ::

- ~@ConfigurationProperties~ ::
  Используется для поддержки внедрения конфигурационных свойств - свойств bean-компонентов.
  + Указывает что значения могут внедряться в свойства bean-компонента из свойств окружения Spring.

- ~@Autowired~ ::
  Явно определяет автоматическое связывание зависимостей.
  + Применяется к свойствам, сеттерам и конструкторам.


- ~@EventListener~


*** Spring Data JPA

- persistence :: Длительное хранение, база данных.

Используй пакет ~javax.persistence~

JPA - Java Persistent API - спецификация, доступа к данным для java-объектов.
- Hibernate :: Одна из реализаций спецификации Spring Data JPA.
  + Позволяет представлять таблицы в виде классов.
    * Экземпляры класса, представляющего таблицу - строки таблицы, а его свойства - столбцы.

**** Аннотации

- ~@Data~ :: Генерирует во _время компиляции_ сеттеры, гетеры и конструктор для всех свойств класса.

- ~@Repository~ :: Указывает что класс предоставляет механизм для хранения, извлечения, обновления и поиска объектов.

- ~@Column~ :: Позволяет задать свойства и ограничения на значения в столбце.
  + unique :: Ограние гарантирует то что значения в столбце будут уникальными.

- ~@Table~ :: Позволяет задать ограничения на значения в таблице, настроить имя таблицы и выбрать .

- ~@GeneratedValue~ :: Позволяет выбрать стратегию генерации первичного ключа базы данных.
  + ~IDENTITY~ :: Самый простой в использовании, но база данных будет генерировать новое значение первичного ключа при выполнении операции вставки столбца.


**** Сущность (Entity) -> Класс, предств. таблицу

- Таблица :: Объект базы данных.

Классы, предств. обычно таблицы хранят либо в пакете domain, либо в пакете model.

Сущность это тип класса, который соответствует определенной таблице в базе данных.
- Экземпляр представляет строку, свойства - столбцы.
  + Изменения внесенные в класс, предств. таблицу отражаются в таблице.


**** Репозиторий -> интерфейс, исп. для доступа к данным и вып. операций над ними, а также для выполения запросов.

- DAO :: Data Access Object.

Абстрагирует от взаимодействия с базой данных. Spring Data JPA реализует в классе ~SipmleJpaRepository~ все объявленные в интерфейсе ~JpaRepository~ и его предках методы.
- ~JpaRepository~ наследует от ~CrudRepository~ & ~PagingAndSortingRepository~.
- Созданный репозиторий не нужно аннотировать аннотацией ~@Repository~ так как его реализация уже аннотирована.

Репозитории данных реализуют доступ к данным в разл. хранилищах.

В параметры шаблона репозитория передают имя таблицы и тип идентификатора

- Репозиторий ~Crud~ предоставляет методы :

  + save() :: Добавить новую строку в таблицу (экземпляр entity класса) или обновить сущ.
    * Для того чтобы изменить сущ. запись нужно получить строку по первичному ключу.
  + saveAll(Iterable<T> строки) :: Позволяет изменить несколько строк таблицы.

  + delete(), deleteById(id) :: Удалить строку из таблицы

  + findById(),
    * Возвращает экземпляр ~Optional<T>~, экземпляр сущности можно получить вызвав метод ~.get()~

  + List<T> findAll() :: Позволяет извлечь все записи из таблицы.


  + delete(), deleteAll().

  + Интерфейс позволяет создать пользовательские методы поиска ~T findByField(FieldType field)~

Созданный репозиторий необходимо включить в компонент или сервис проекта с пом. аннотации ~@Autowired~

***** Запросы к базе данных на JPQL

- Аннотация ~@Query~ позволяет аннотировать метод интерфейса репозитория строкой, сод. выражение на ~JPQL~
