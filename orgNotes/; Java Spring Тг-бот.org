#+startup: overview
#+startup: num
* Ресурсы

1. Герберт Шидт - Java Полное руководство
2. Крейг Уоллс - Spring в действии

* Ход работы

** Этапы

2. Реализация базового функционала

3. Подключение базы данных Postgre SQL, разделение функционала бота.

4. Обработка ошибок, настройка автоматических тестов

** Вопросы

** Задачи [/]



* Теор материал
** Тг бот

- Бот :: Особая учетная запись, небольшое приложение, которое запускается внутри приложения Телеграм, используюет сообщения в качестве входных данных.
  + Главная ф-ция :: отправлять и получать сообщения.
    * Может писать в лс только тем пользователям, которые его запустили.
    * Отправляет запросы на Телеграм и получает от него обновления.
    * Пишутся на Java, js, python с использованием Telegram Bot API или Telegram API (используется больше для создания своего клиента Телеграм) И библиотек.

Создать и настроить бота можно через спец. бота BotFather, он выдает уникальный идентификатор бота, он используется для управления созданным ботом.

** Средство автоматизации сборки Gradle

Зависимость - внешний модуль (фреймворк, библиотека, плагин), необходимый на одном из этапов разработки ПО.
- Объявляется в блоке dependencies.

Конфигурация зависимости определяет этап разработки, на котором она будет задействована : компиляции, сборки, тестирования.

Чтобы объявить зависимость на языке gradle-groovy нужно :
1. Выбрать конфигурацию :
   - implementation :: Зависимость необходима на этапе компиляции. Включается в переменную среды окружения classpath.
   - compileOnly :: Зависимость необходима на этапе компиляции. Не включается в classpath.
2. Описать зависимость. Зависимость описывается 4 ключами : группы, имени и версии.


** Фреймворк Spring

Аннтоция позволяет идентифицировать класс как bean-компонент.

*** Терминология

- Зависимость :: Одно из отношение между объектами в терминах ООП, один объект каким то образом ссылается на другой.

- bean :: Компонент объектной модели JavaBeans. Объект некоторого класса, который создается и обслуживается Spring

- classpath :: Каталог, в котором осуществляется поиск классов.

- Spring Boot :: Расширение фреймворка Java Spring, используется для создания микросервисов. Предоставляет :
  1. Автоконфигурацию, механизм, который позволяет автоматизировать управление контекстом приложения.
  2. Автоматизацию сборки зависимостей
  3. Мониторинг времени выполнения.

- Микросервис :: Маленькая веб-служба выполняет определенные задачи И взаимодействует с другими веб-службами.
  + (разделяй и властвуй) Позволяют разбить большое, сложное монолитное приложение на маленькие, логически независимые модули, что существенно упрощает процессы : разработки, тестирования и развертывания.
  + Приложения на основе микросервисов размещаются в облаке.

- Вебхук == веб-перехватчик :: Механизм получения одним приложением в режиме реального времени информации о событиях, происходящих в другом приложении.
  + Сервер c вебхуком автоматически отправляет клиенту полезную информацию всякий раз когда на серверном приложении происходит определенное событие.
  + Использует протокол HTTP или HTTPS.
    * В целях защиты соединения полезные данные хешируют.

- Контроллер :: Класс, обрабатывает запросы и возвращает некотрорую информацию.

- jar :: Архивный файл приложения на языке Java. Используется для хранения приложения Java в одном файле, состоит из скомпилированных в байт-код классов, списка ресурсов и ресурсов приложения.
  + В момент запуска jar файла вызывается метод main - точка входа в программу.


*** Возможности Spring

Используется везде, где используется Java, просто упрощает разработку приложений.

Spring :: Самый популярный Java фреймворк, облегчает разработку, позволяет автоматизировать управление зависимостями, создает контекст приложения и обеспечивает удобный доступ к б/д, предоставляет :
 a. Механизм автоматического связывания компонентов проекта, основанный на использовании :
    * Классов конфигурации
    * Механизма сканирования (Spring обнаруживает компоненты в каталогах classpath).

 b. Автоконфигурацию (анализирует classpath и переменные окружения)

**** Инъекция зависимостей

Spring создает контейнер == *контекст приложения*, в котором создает необходимые объекты классов, из которых состоит приложение и управляет их жизненным циклом.
- Контекстом приложения управляют с помощью XML-файлов (устаревший способ), так и с помощью спец. класса конфигурации (актуальный способ).

Класс конфигурации
- Может иметь любое имя, класс конфигурации определяет аннотация @Config.

*** Структура проекта Java Spring

- Spring Tool Suite :: среда разработки на Spring, расширение для vs code.

- Spring Initializr :: Инструмент инициализации проекта на Spring Boot, Предоставляет REST API.

- Gradle :: Высокопроизводительный иструмент для автоматизации сборки приложений. Выполняется на виртуальной машине Java. Лучше чем Maven.
  + Зависимости добавляются в файл ~build.gradle~.
    - Зависимости :: Модули, библиотеки, необходимые для компиляции приложения.

    - Объявление зависимостей : 1 - в виде строки, 2 - в виде структуры, сост. из пар ключ-значение : группа, имя, версия.
    - Типы зависимостей : 1 - implementation -> используется только для компиляции приложения.

Каталог ~/src/test/~ предназначен для автоматических тестов.

Каталог ~resources~ содержит статические ресурсы (таблицы стилей, изображения, JavaScript) и шаблоны html, предназначенные для отображения контента в браузере.
- ~/src/main/resources/static/~

Статический метод ~run(класс_конфигурации, агрументы_командной_строки)~ класса ~SpringApplication~ выполняет фактическую загрузку приложения (вместе со всеми зависимостями), создает контекст приложения ~Spring~.




**** Метаданные проекта

1. Идентификатор группы должен соответствовать соглашениям Java о идентификаторах пакетов. Чтобы сформировать уникальный идентификатор пакета нужно использовать обратное доменное имя организации в качестве префикса для идентифкатора пакета.
   - Доменное имя :: Абстракция над ip адресом, состоит из корневого домена и одного или нескольких компонентов, разделенных точками.
     1. Корневой домен (TLD) % ru, uk, com, org.
     2. Один или несколько компонентов, следующих за корневым доменом. Последовательность от 1 до 63 символов (букв лат. алфавита, цифр и символа -).
2. Идентификатор информационного продукта == идентификатор jar без версии.
   - Диспатчер используется для обработки потока сообщений из тг. Создается с помощью spring boot.

3. Брокер сообщений :: Посредник между несколькими частями системы, обеспечивает ассинхронность обработки и распределения сообщений.


*** Аннотации Spring и Lombok

- @SpringBootApplication :: Указывается в главном классе приложения. Специализированная форма аннотации @Configuration, включает сканирование и автоконфигурацию компонентов.
  + @Configuration :: Указывает Spring что аннотированный класс - спец. класс конфигурации, который создает bean-компоненты для контекста Spring.
  + @ComponentScan :: Включает сканирование компонентов.

- @Component :: Класс является компонентом контекста приложения Spring.
  + Т. е. если объект класса, объявленного как компонент класса используется другими классами, то он будет создан автоматически.

- @Bean Определяет методы, создающие экземпляры компонентов и устанавливает их свойства.
  + Имя бина по умолчанию совпадает с именем метода.
  + Этой аннотацией снабжают методы класса конфигурации. Возвращаемые ими объекты должны быть добавлены в контекст приложения как бин-компоненты.

- @ConfigurationProperties свойства с этой аннотацией - свойства ~bean-компонентов~ (конфигурационные свойства), их объявляют в файле : application.properties.


  - @Data :: Генерирует во _время компиляции_ сеттеры, гетеры и конструктор для всех свойств класса.
