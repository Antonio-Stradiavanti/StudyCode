* TODO Ход работы

- [X] Разобраться с представлением графа в памяти.


* Алгоритм постоения всех остовных деревьев графа.

- Лес :: Множество деревьев.

- Дерево :: Связанный, неориентированный граф : между любой парой вершин существует ровно один путь.
  + Для n вершин содержит n-1 ребер.

- Дерево покрытия графа == остовное дерево графа :: Подграф, графа G, является деревом и содержит все вершины графа G.
  + Минимальное остовное дерево :: (находят во взвешенном графе) Остовное дерево с минимальным общим весом ребер.

Удаление из дерева любого ребра превращает его в несвязанный граф.

Для построения остовного дерева из множества ребер G отбирают только те, которые не образуют циклов с уже выбранными.

* Представление графа в памяти

- Adjacency :: Смежность.

В большинстве реальных графов число ребер значительно меньше чем квадрат числа вершин.

1. Список имен вершин и список ребер. -> не эффективно с точки зрения /времени/ :(.

2. Матрица смежности -> не эффективно с точки зрения /памяти/ :( => не подходит для хранения слабо связанных графов.
   + Строки и столбцы - вершины.
   + Матрица смежности симметрична для несвязанного графа => можно заполнить только нижний или верхний треугольник.
   + Для обычного графа состоит из 0 и 1
   + Для взвешенного графа состоит -1, и весов.
     * -1 означает что между вершинами нет ребер.

3. Список смежности -> эффективно по всем параметрам. Применяют на практике.
