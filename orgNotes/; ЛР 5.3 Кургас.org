* Ресурсы

[[https://en.wikipedia.org/wiki/Class_diagram][wiki - Диаграмма классов]]

* Спецификация

- Цель работы :: научиться формализовывать предметную область в виде классовой диаграммы.

- Задание кафедры :: Для предметной области "Условные знаки" _придумать задачу_, которую можно /автоматизировать/ созданием информационной системы.

  _Необходимо :_

  + Выделить сущности предметной области.
  + Каждую сущность следует описать ее свойствами и методами.
  + Построить *диаграмму классов* с указанием их свойств и методов, а также связей между классами. На итоговой диаграмме должно быть не менее 10 классов, с опсаниями их функционала, их свойств и методов, должны быть представлены все основные виды связей :

* Вопросы хода работы

** Сущности предметной области "условные знаки", их свойства и методы.

Уравнение в физике может быть формулой, но не все формулы являются уравнениями.

- Условный знак :: Символ, используемый для представления объектов.
  + В математике с помощью условных знаков обозачают переменные и операции.

** Задача предметной области "условные знаки"


** Что такое UML и как с ним работать

- UML :: Унифицированный язык моделирования, предназначен для моделирования программ с помощь набора различных видов диаграмм.
  + В моделях отображаются только основные части программы и их взаимодействие.

** Как нарисовать диаграмму классов

Диаграмма классов содержит общую декларативную информацию о свойствах, функционале и методах классов И их взаимосвязях.

Например с помощью web-приложения *draw io*.

Классы - слова и термины из предметной области задачи.

- Существительные становятся именами классов, характеристики - их атрибутами, а глаголы - операциями (методами).

Каждое слово в имени класса начинается с заглавной буквы, первая буква в имени метода всегда строчная.

Имена свойств обозначают строчными буквами, если имя состоит из нескольких слов, то каждое следующее слово начинается с прописной буквы.

Пакет в терминах UML - пространство имен. Имя пакета отделяется от имени класса символом ~::~.

Класс отображаются в виде прямоугольника с 3-мя разделами : имя, свойства, методы. На диаграмме можно отобразить лишь некоторые атрибуты и операции.

- Имя абстрактного класса выделяется курсивом.

- Стереотип :: Ключевое слово, заключенное в 2 пары угловых скобок, используется для организации списка атрибутов и операций.
- Описание *функционала* класса указывают ниже списка методов класса.
- Описание *ограничений* класса приводят в виде /произвольного текста/, заключеного в _фигурные скобки_ на одном уровне со свойством, к которому относятся.

*** Отображение уровней доступа к членам класса :

+ + Открытый
+ - Частный
+ # Защищенный

*** Сигнатура

- Отображение свойств класса :: ~имяСвойства : тип_свойства = значение_по_умолчанию~
  + Двоеточие отделяет идентификатор от типа.

- Отображение методов класса :: ~идентификатор(параметр1: тип1) : тип_возвращаемого_значения~

*** Отображение отношений между классами

Стрелка или ромб всегда направлены от элемента к контейнеру, от производного к базовому.

#+attr_org: :width 50px
#+attr_html: :width 100px

[[~/__Vault/Imgs/Uml_classes.png]]

- Ассоциация :: Отношение между 2-мя и более классами, описывающее концептуальное взаимодействие их объектов друг с другом. Ассоциации можно именовать и указывать роли каждого из классов. Если ассоциация имеет атрибуты и операции то объявляют класс ассоциации
  + Пример ассоциации в С++ : объявление дружественной ф-ции.
  + Двухсторонняя ассоциация отображается как линия.

- Агрегация :: Отношение часть-целое, один класс - независимая часть другого класса, объекты этих классов могут существовать независимо друг от друга, один объект является контейнером по отношению к другим объектам.
  + Аггрегат (от лат. aggregatus == объединять) :: Объект, состоящий из нескольких элементов, объединенных для выполнения определенных функций.
  + Пример аггрегации в С++ : экземпляр класса вектор, хранящий объекты других классов.
  + Пример аггрегации : Ппруд и утки, Доцент и студенты.
- Композиция :: Отношение, предполагающее *тесную взаимосвязь* между аггрегатом и составляющими его компонентами, экземляр одного класса является свойством другого и не может существовать отдельно от него.
  + Пример композиции : Карбюратор и машина.
- Зависимость :: Отношение, предполагает, в отличие от композици, более слабую взаимосвязь : независимый класс является параметром или локальной переменной метода зависимого класса.

- Наследование :: В пряугольниках производных классов отображаются только уникальные свойства и методы.
  + Множественное наследование :: Производный класс имеет несколько предков.

* Контрольные вопросы

** Какие бывают отношения между классами?

Наследование, аггрегация, ассоциация, композиция.

** Как обозначаются отношения на диаграмме классов?

Стрелками с закрашенными или пустыми ромбами или стрелками на концах.

** Что обозначает отношение «ассоциация»? Приведите пример.

Подписчик и журнал.

** Что обозначает отношение «агрегация»? Приведите пример.



** Что обозначает отношение «композиция»? Приведите пример.


** Чем отличается отношение «агрегация» от отношения «композиция»?

Классы между которыми установлено отношение композиция зависимы друг от друга, а классы между которыми уставнолено отношение аггрегация - независимы.


** Что обозначает отношение «зависимость»? Приведите пример.

Класс машина имеет метод ~повернутьНаЛев()о~ или ~turnRight()~, метод использует в качестве локальной переменной объект класса ~Колесо~ или ~Wheel~.
