#+TITLE: Мощная и естественная парадигма, используется для создания программ любой сложности.
#+DESCRIPTION: Программа - совокупность взаимодействующих объектов.
* Класс и объект

** Ведищев

Код методов класса хранится в сегменте кода
- Доступ к свойствам конкретного объекта внутри методов осуществляется с помощью указателя ~this~

Класс не просто изолированный фрагмент программы, а формализация некоторой концепции.

Доступ к внутренним данным класса возможен только с помощью методов или привелегированных (дружественных функций).

- Экземпляр класса :: сущность в адресном пространстве ЭВМ, появляется при его создании конструктором.

* Три принципа :
  - с помощью использвания этих принципов различные части сложной программы могут быть объединены в единое, надежное, сопровождаемое, многократно используемое целое.

** DONE Инкапсуляция == изоляция (от лат. : in capsula)

- Реазиция принципа сокрытия информации Парнаса в ООП. *Механизм*, объединяет данные и методы, работающие с ними, в классе.

  + Методы обеспечивают открытый интерфейс для взаимодействия объекта с другими объектами системы через интерфейс ввода-вывода.
  + Данные скрываются чтобы исключить возможность произвольного доступа к ним из вне.

** DONE Наследование

Отношение обратное наследованию - обобщение.

Чем больше информации, тем хуже управляемость моделированием.

Большинство знаний стало доступно благодаря иерархической классификации.

- _Механизм_, позволяет описать класс на основе уже существующего, с частично или полностью заимствованной функциональностью.
  + Для производного класса определяются только свойства и методы, делающие его уникальным в иерархии классов. Остальное *обобщается* в базовом классе, это позволяет пограммисту сэкономить время, не писать одно и тоже.
  + Производный класс наследует все свойства и методы предков и прибавляет к ним свои, все они последовательно хранятся в памяти.

** DONE Полиморфизм

- Полиморфизм реализует принцип "один интерфейс - множество реализаций". Механизм полиморфизма позволяет использовать один интерфейс для "класса" операций, а также использовать объекты с одинаковым интерфейсом, не имея информации об их типах и внутренней структуре.
